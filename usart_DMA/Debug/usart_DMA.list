
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001384  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800150c  0800150c  0001150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800152c  0800152c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800152c  0800152c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800152c  0800152c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001530  08001530  00011530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003fc3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000114f  00000000  00000000  00023ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000540  00000000  00000000  00025148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000498  00000000  00000000  00025688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f70  00000000  00000000  00025b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000473c  00000000  00000000  0003aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006d7a7  00000000  00000000  0003f1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ac973  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013ac  00000000  00000000  000ac9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014f4 	.word	0x080014f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080014f4 	.word	0x080014f4

080001c8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <NVIC_EnableIRQ+0x30>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000228:	2b00      	cmp	r3, #0
 800022a:	da0b      	bge.n	8000244 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	b2da      	uxtb	r2, r3
 8000230:	490c      	ldr	r1, [pc, #48]	; (8000264 <NVIC_SetPriority+0x4c>)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 030f 	and.w	r3, r3, #15
 8000238:	3b04      	subs	r3, #4
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	440b      	add	r3, r1
 8000240:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000242:	e009      	b.n	8000258 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4907      	ldr	r1, [pc, #28]	; (8000268 <NVIC_SetPriority+0x50>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	0112      	lsls	r2, r2, #4
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	440b      	add	r3, r1
 8000254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000e100 	.word	0xe000e100

0800026c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800026c:	b480      	push	{r7}
 800026e:	b089      	sub	sp, #36	; 0x24
 8000270:	af00      	add	r7, sp, #0
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	f003 0307 	and.w	r3, r3, #7
 800027e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	f1c3 0307 	rsb	r3, r3, #7
 8000286:	2b04      	cmp	r3, #4
 8000288:	bf28      	it	cs
 800028a:	2304      	movcs	r3, #4
 800028c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	3304      	adds	r3, #4
 8000292:	2b06      	cmp	r3, #6
 8000294:	d902      	bls.n	800029c <NVIC_EncodePriority+0x30>
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3b03      	subs	r3, #3
 800029a:	e000      	b.n	800029e <NVIC_EncodePriority+0x32>
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a0:	f04f 32ff 	mov.w	r2, #4294967295
 80002a4:	69bb      	ldr	r3, [r7, #24]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	43da      	mvns	r2, r3
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	401a      	ands	r2, r3
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002b4:	f04f 31ff 	mov.w	r1, #4294967295
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43d9      	mvns	r1, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c4:	4313      	orrs	r3, r2
         );
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3724      	adds	r7, #36	; 0x24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
	...

080002d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	4907      	ldr	r1, [pc, #28]	; (8000300 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	695a      	ldr	r2, [r3, #20]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4013      	ands	r3, r2
 80002f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002f2:	68fb      	ldr	r3, [r7, #12]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ffe3 	bl	80002d4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800030e:	f7ff ff5b 	bl	80001c8 <NVIC_GetPriorityGrouping>
 8000312:	4603      	mov	r3, r0
 8000314:	2200      	movs	r2, #0
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ffa7 	bl	800026c <NVIC_EncodePriority>
 800031e:	4603      	mov	r3, r0
 8000320:	4619      	mov	r1, r3
 8000322:	2010      	movs	r0, #16
 8000324:	f7ff ff78 	bl	8000218 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000328:	2010      	movs	r0, #16
 800032a:	f7ff ff5b 	bl	80001e4 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800032e:	f7ff ff4b 	bl	80001c8 <NVIC_GetPriorityGrouping>
 8000332:	4603      	mov	r3, r0
 8000334:	2200      	movs	r2, #0
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff97 	bl	800026c <NVIC_EncodePriority>
 800033e:	4603      	mov	r3, r0
 8000340:	4619      	mov	r1, r3
 8000342:	2011      	movs	r0, #17
 8000344:	f7ff ff68 	bl	8000218 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000348:	2011      	movs	r0, #17
 800034a:	f7ff ff4b 	bl	80001e4 <NVIC_EnableIRQ>

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <LL_AHB1_GRP1_EnableClock>:
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800035e:	695a      	ldr	r2, [r3, #20]
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4313      	orrs	r3, r2
 8000366:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	695a      	ldr	r2, [r3, #20]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4013      	ands	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000372:	68fb      	ldr	r3, [r7, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	683a      	ldr	r2, [r7, #0]
 8000392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
 80003b4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003ba:	f7ff ffcb 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80003be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80003c2:	f7ff ffc7 	bl	8000354 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80003c6:	2108      	movs	r1, #8
 80003c8:	480a      	ldr	r0, [pc, #40]	; (80003f4 <MX_GPIO_Init+0x54>)
 80003ca:	f7ff ffdb 	bl	8000384 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80003ce:	2308      	movs	r3, #8
 80003d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003d2:	2301      	movs	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003de:	2300      	movs	r3, #0
 80003e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e2:	463b      	mov	r3, r7
 80003e4:	4619      	mov	r1, r3
 80003e6:	4803      	ldr	r0, [pc, #12]	; (80003f4 <MX_GPIO_Init+0x54>)
 80003e8:	f000 fd2e 	bl	8000e48 <LL_GPIO_Init>

}
 80003ec:	bf00      	nop
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	48000400 	.word	0x48000400

080003f8 <NVIC_SetPriorityGrouping>:
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f003 0307 	and.w	r3, r3, #7
 8000406:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <NVIC_SetPriorityGrouping+0x44>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800042a:	4a04      	ldr	r2, [pc, #16]	; (800043c <NVIC_SetPriorityGrouping+0x44>)
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	60d3      	str	r3, [r2, #12]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <LL_RCC_HSI_Enable+0x1c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <LL_RCC_HSI_Enable+0x1c>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <LL_RCC_HSI_IsReady+0x20>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 0302 	and.w	r3, r3, #2
 800046c:	2b02      	cmp	r3, #2
 800046e:	bf0c      	ite	eq
 8000470:	2301      	moveq	r3, #1
 8000472:	2300      	movne	r3, #0
 8000474:	b2db      	uxtb	r3, r3
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	00db      	lsls	r3, r3, #3
 8000498:	4904      	ldr	r1, [pc, #16]	; (80004ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800049a:	4313      	orrs	r3, r2
 800049c:	600b      	str	r3, [r1, #0]
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <LL_RCC_SetSysClkSource+0x24>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	f023 0203 	bic.w	r2, r3, #3
 80004c0:	4904      	ldr	r1, [pc, #16]	; (80004d4 <LL_RCC_SetSysClkSource+0x24>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	604b      	str	r3, [r1, #4]
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <LL_RCC_GetSysClkSource+0x18>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f003 030c 	and.w	r3, r3, #12
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <LL_RCC_SetAHBPrescaler+0x24>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <LL_RCC_SetAHBPrescaler+0x24>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	604b      	str	r3, [r1, #4]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800052c:	4904      	ldr	r1, [pc, #16]	; (8000540 <LL_RCC_SetAPB1Prescaler+0x24>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	604b      	str	r3, [r1, #4]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000

08000544 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <LL_RCC_SetAPB2Prescaler+0x24>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	604b      	str	r3, [r1, #4]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000

0800056c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000576:	69da      	ldr	r2, [r3, #28]
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <LL_APB1_GRP1_EnableClock+0x2c>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000

0800059c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005a6:	699a      	ldr	r2, [r3, #24]
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005b2:	699a      	ldr	r2, [r3, #24]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4013      	ands	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <LL_FLASH_SetLatency+0x24>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f023 0207 	bic.w	r2, r3, #7
 80005dc:	4904      	ldr	r1, [pc, #16]	; (80005f0 <LL_FLASH_SetLatency+0x24>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	600b      	str	r3, [r1, #0]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40022000 	.word	0x40022000

080005f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <LL_FLASH_GetLatency+0x18>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0307 	and.w	r3, r3, #7
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40022000 	.word	0x40022000

08000610 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b04      	cmp	r3, #4
 800061c:	d106      	bne.n	800062c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800062a:	e005      	b.n	8000638 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 8000632:	f023 0304 	bic.w	r3, r3, #4
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e010 	.word	0xe000e010

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff ffa5 	bl	800059c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000652:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000656:	f7ff ff89 	bl	800056c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065a:	2003      	movs	r0, #3
 800065c:	f7ff fecc 	bl	80003f8 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f808 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f7ff fe9c 	bl	80003a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f7ff fe4c 	bl	8000304 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800066c:	f000 fa2a 	bl	8000ac4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x28>
	...

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff ffa7 	bl	80005cc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800067e:	f7ff ffb9 	bl	80005f4 <LL_FLASH_GetLatency>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x18>
  {
  Error_Handler();
 8000688:	f000 f82a 	bl	80006e0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800068c:	f7ff fed8 	bl	8000440 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000690:	bf00      	nop
 8000692:	f7ff fee5 	bl	8000460 <LL_RCC_HSI_IsReady>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d1fa      	bne.n	8000692 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800069c:	2010      	movs	r0, #16
 800069e:	f7ff fef1 	bl	8000484 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff26 	bl	80004f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff37 	bl	800051c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff48 	bl	8000544 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fefb 	bl	80004b0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80006ba:	bf00      	nop
 80006bc:	f7ff ff0c 	bl	80004d8 <LL_RCC_GetSysClkSource>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1fa      	bne.n	80006bc <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <SystemClock_Config+0x68>)
 80006c8:	f000 fed2 	bl	8001470 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f7ff ff9f 	bl	8000610 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80006d2:	4802      	ldr	r0, [pc, #8]	; (80006dc <SystemClock_Config+0x68>)
 80006d4:	f000 feda 	bl	800148c <LL_SetSystemCoreClock>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	007a1200 	.word	0x007a1200

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <HardFault_Handler+0x4>

08000702 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <BusFault_Handler+0x4>

0800070e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <UsageFault_Handler+0x4>

08000714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <SystemInit+0x84>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <SystemInit+0x84>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <SystemInit+0x88>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <SystemInit+0x88>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <SystemInit+0x88>)
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	4918      	ldr	r1, [pc, #96]	; (80007f0 <SystemInit+0x88>)
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <SystemInit+0x8c>)
 8000790:	4013      	ands	r3, r2
 8000792:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <SystemInit+0x88>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <SystemInit+0x88>)
 800079a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800079e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SystemInit+0x88>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a11      	ldr	r2, [pc, #68]	; (80007f0 <SystemInit+0x88>)
 80007aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <SystemInit+0x88>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <SystemInit+0x88>)
 80007b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007ba:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <SystemInit+0x88>)
 80007be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <SystemInit+0x88>)
 80007c2:	f023 030f 	bic.w	r3, r3, #15
 80007c6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <SystemInit+0x88>)
 80007ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007cc:	4908      	ldr	r1, [pc, #32]	; (80007f0 <SystemInit+0x88>)
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <SystemInit+0x90>)
 80007d0:	4013      	ands	r3, r2
 80007d2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <SystemInit+0x88>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <SystemInit+0x84>)
 80007dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e0:	609a      	str	r2, [r3, #8]
#endif
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	f87fc00c 	.word	0xf87fc00c
 80007f8:	ff00fccc 	.word	0xff00fccc

080007fc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LL_DMA_SetDataTransferDirection+0x48>)
 800080e:	5cd3      	ldrb	r3, [r2, r3]
 8000810:	461a      	mov	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800081c:	f023 0310 	bic.w	r3, r3, #16
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	3a01      	subs	r2, #1
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <LL_DMA_SetDataTransferDirection+0x48>)
 8000826:	5c8a      	ldrb	r2, [r1, r2]
 8000828:	4611      	mov	r1, r2
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	440a      	add	r2, r1
 800082e:	4611      	mov	r1, r2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	08001524 	.word	0x08001524

08000848 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3b01      	subs	r3, #1
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <LL_DMA_SetMode+0x44>)
 800085a:	5cd3      	ldrb	r3, [r2, r3]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 0220 	bic.w	r2, r3, #32
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	3b01      	subs	r3, #1
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <LL_DMA_SetMode+0x44>)
 800086e:	5ccb      	ldrb	r3, [r1, r3]
 8000870:	4619      	mov	r1, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	440b      	add	r3, r1
 8000876:	4619      	mov	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	08001524 	.word	0x08001524

08000890 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3b01      	subs	r3, #1
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	4907      	ldr	r1, [pc, #28]	; (80008d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80008b6:	5ccb      	ldrb	r3, [r1, r3]
 80008b8:	4619      	mov	r1, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	440b      	add	r3, r1
 80008be:	4619      	mov	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	08001524 	.word	0x08001524

080008d8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <LL_DMA_SetMemoryIncMode+0x44>)
 80008ea:	5cd3      	ldrb	r3, [r2, r3]
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <LL_DMA_SetMemoryIncMode+0x44>)
 80008fe:	5ccb      	ldrb	r3, [r1, r3]
 8000900:	4619      	mov	r1, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	440b      	add	r3, r1
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	08001524 	.word	0x08001524

08000920 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	3b01      	subs	r3, #1
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <LL_DMA_SetPeriphSize+0x44>)
 8000932:	5cd3      	ldrb	r3, [r2, r3]
 8000934:	461a      	mov	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4413      	add	r3, r2
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3b01      	subs	r3, #1
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <LL_DMA_SetPeriphSize+0x44>)
 8000946:	5ccb      	ldrb	r3, [r1, r3]
 8000948:	4619      	mov	r1, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	440b      	add	r3, r1
 800094e:	4619      	mov	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4313      	orrs	r3, r2
 8000954:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	08001524 	.word	0x08001524

08000968 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	3b01      	subs	r3, #1
 8000978:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <LL_DMA_SetMemorySize+0x44>)
 800097a:	5cd3      	ldrb	r3, [r2, r3]
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4413      	add	r3, r2
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3b01      	subs	r3, #1
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <LL_DMA_SetMemorySize+0x44>)
 800098e:	5ccb      	ldrb	r3, [r1, r3]
 8000990:	4619      	mov	r1, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	440b      	add	r3, r1
 8000996:	4619      	mov	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4313      	orrs	r3, r2
 800099c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	08001524 	.word	0x08001524

080009b0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	461a      	mov	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80009d6:	5ccb      	ldrb	r3, [r1, r3]
 80009d8:	4619      	mov	r1, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	440b      	add	r3, r1
 80009de:	4619      	mov	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	600b      	str	r3, [r1, #0]
             Priority);
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	08001524 	.word	0x08001524

080009f8 <LL_AHB1_GRP1_EnableClock>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000

08000a28 <LL_APB1_GRP1_EnableClock>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a32:	69da      	ldr	r2, [r3, #28]
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a3e:	69da      	ldr	r2, [r3, #28]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f043 0201 	orr.w	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	609a      	str	r2, [r3, #8]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000aee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000af2:	f7ff ff99 	bl	8000a28 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000af6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000afa:	f7ff ff7d 	bl	80009f8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8000afe:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 f992 	bl	8000e48 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2106      	movs	r1, #6
 8000b28:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b2a:	f7ff fe67 	bl	80007fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8000b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b32:	2106      	movs	r1, #6
 8000b34:	4830      	ldr	r0, [pc, #192]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b36:	f7ff ff3b 	bl	80009b0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2106      	movs	r1, #6
 8000b3e:	482e      	ldr	r0, [pc, #184]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b40:	f7ff fe82 	bl	8000848 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2106      	movs	r1, #6
 8000b48:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b4a:	f7ff fea1 	bl	8000890 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	2106      	movs	r1, #6
 8000b52:	4829      	ldr	r0, [pc, #164]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b54:	f7ff fec0 	bl	80008d8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b5e:	f7ff fedf 	bl	8000920 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2106      	movs	r1, #6
 8000b66:	4824      	ldr	r0, [pc, #144]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b68:	f7ff fefe 	bl	8000968 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2107      	movs	r1, #7
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b72:	f7ff fe43 	bl	80007fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8000b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b7a:	2107      	movs	r1, #7
 8000b7c:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b7e:	f7ff ff17 	bl	80009b0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2107      	movs	r1, #7
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b88:	f7ff fe5e 	bl	8000848 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2107      	movs	r1, #7
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b92:	f7ff fe7d 	bl	8000890 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	2107      	movs	r1, #7
 8000b9a:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000b9c:	f7ff fe9c 	bl	80008d8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000ba6:	f7ff febb 	bl	8000920 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2107      	movs	r1, #7
 8000bae:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x134>)
 8000bb0:	f7ff feda 	bl	8000968 <LL_DMA_SetMemorySize>

  USART_InitStruct.BaudRate = 115200;
 8000bb4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bb8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x138>)
 8000bda:	f000 fbc3 	bl	8001364 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_USART2_UART_Init+0x138>)
 8000be0:	f7ff ff60 	bl	8000aa4 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x138>)
 8000be6:	f7ff ff47 	bl	8000a78 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART2_UART_Init+0x138>)
 8000bec:	f7ff ff34 	bl	8000a58 <LL_USART_Enable>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40004400 	.word	0x40004400

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c06:	e003      	b.n	8000c10 <LoopCopyDataInit>

08000c08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c0e:	3104      	adds	r1, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c18:	d3f6      	bcc.n	8000c08 <CopyDataInit>
	ldr	r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c1c:	e002      	b.n	8000c24 <LoopFillZerobss>

08000c1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c20:	f842 3b04 	str.w	r3, [r2], #4

08000c24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <LoopForever+0x16>)
	cmp	r2, r3
 8000c26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c28:	d3f9      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c2a:	f7ff fd9d 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f000 fc3d 	bl	80014ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fd09 	bl	8000648 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000c3c:	08001534 	.word	0x08001534
	ldr	r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c44:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000c48:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000c4c:	20000020 	.word	0x20000020

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>

08000c52 <LL_GPIO_SetPinMode>:
{
 8000c52:	b480      	push	{r7}
 8000c54:	b089      	sub	sp, #36	; 0x24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2103      	movs	r1, #3
 8000c78:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3724      	adds	r7, #36	; 0x24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_GPIO_SetPinOutputType>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	fb01 f303 	mul.w	r3, r1, r3
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	605a      	str	r2, [r3, #4]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <LL_GPIO_SetPinSpeed>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa93 f3a3 	rbit	r3, r3
 8000cf6:	613b      	str	r3, [r7, #16]
  return(result);
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2103      	movs	r1, #3
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	401a      	ands	r2, r3
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	609a      	str	r2, [r3, #8]
}
 8000d2a:	bf00      	nop
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_GPIO_SetPinPull>:
{
 8000d36:	b480      	push	{r7}
 8000d38:	b089      	sub	sp, #36	; 0x24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa93 f3a3 	rbit	r3, r3
 8000d50:	613b      	str	r3, [r7, #16]
  return(result);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	fab3 f383 	clz	r3, r3
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fab3 f383 	clz	r3, r3
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3724      	adds	r7, #36	; 0x24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <LL_GPIO_SetAFPin_0_7>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6a1a      	ldr	r2, [r3, #32]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	613b      	str	r3, [r7, #16]
  return(result);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	fab3 f383 	clz	r3, r3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	210f      	movs	r1, #15
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	fab3 f383 	clz	r3, r3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	621a      	str	r2, [r3, #32]
}
 8000dde:	bf00      	nop
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_GPIO_SetAFPin_8_15>:
{
 8000dea:	b480      	push	{r7}
 8000dec:	b089      	sub	sp, #36	; 0x24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	613b      	str	r3, [r7, #16]
  return(result);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	210f      	movs	r1, #15
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	431a      	orrs	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e3c:	bf00      	nop
 8000e3e:	3724      	adds	r7, #36	; 0x24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	613b      	str	r3, [r7, #16]
  return(result);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e70:	e048      	b.n	8000f04 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	2101      	movs	r1, #1
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d03a      	beq.n	8000efe <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fede 	bl	8000c52 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d003      	beq.n	8000ea6 <LL_GPIO_Init+0x5e>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d106      	bne.n	8000eb4 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	69b9      	ldr	r1, [r7, #24]
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff14 	bl	8000cdc <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff3a 	bl	8000d36 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d119      	bne.n	8000efe <LL_GPIO_Init+0xb6>
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ed6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d807      	bhi.n	8000ef0 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	69b9      	ldr	r1, [r7, #24]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff51 	bl	8000d90 <LL_GPIO_SetAFPin_0_7>
 8000eee:	e006      	b.n	8000efe <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff76 	bl	8000dea <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1af      	bne.n	8000e72 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d003      	beq.n	8000f22 <LL_GPIO_Init+0xda>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d107      	bne.n	8000f32 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	6819      	ldr	r1, [r3, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff febd 	bl	8000cac <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LL_RCC_HSI_IsReady>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <LL_RCC_HSI_IsReady+0x20>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40021000 	.word	0x40021000

08000f60 <LL_RCC_LSE_IsReady>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <LL_RCC_LSE_IsReady+0x20>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <LL_RCC_GetSysClkSource>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <LL_RCC_GetSysClkSource+0x18>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <LL_RCC_GetAHBPrescaler+0x18>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <LL_RCC_GetUSARTClockSource+0x28>)
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	2103      	movs	r1, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	401a      	ands	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	061b      	lsls	r3, r3, #24
 800100e:	4313      	orrs	r3, r2
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000

08001020 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <LL_RCC_PLL_GetMainSource+0x18>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <LL_RCC_PLL_GetPrediv+0x18>)
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	f003 030f 	and.w	r3, r3, #15
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800107c:	f000 f864 	bl	8001148 <RCC_GetSystemClockFreq>
 8001080:	4602      	mov	r2, r0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f882 	bl	8001194 <RCC_GetHCLKClockFreq>
 8001090:	4602      	mov	r2, r0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f890 	bl	80011c0 <RCC_GetPCLK1ClockFreq>
 80010a0:	4602      	mov	r2, r0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f89c 	bl	80011e8 <RCC_GetPCLK2ClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60da      	str	r2, [r3, #12]
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12d      	bne.n	800112e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff8e 	bl	8000ff4 <LL_RCC_GetUSARTClockSource>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d00a      	beq.n	80010f4 <LL_RCC_GetUSARTClockFreq+0x34>
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d819      	bhi.n	8001116 <LL_RCC_GetUSARTClockFreq+0x56>
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d002      	beq.n	80010ec <LL_RCC_GetUSARTClockFreq+0x2c>
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d00c      	beq.n	8001104 <LL_RCC_GetUSARTClockFreq+0x44>
 80010ea:	e014      	b.n	8001116 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80010ec:	f000 f82c 	bl	8001148 <RCC_GetSystemClockFreq>
 80010f0:	60f8      	str	r0, [r7, #12]
        break;
 80010f2:	e021      	b.n	8001138 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80010f4:	f7ff ff22 	bl	8000f3c <LL_RCC_HSI_IsReady>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d019      	beq.n	8001132 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001100:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001102:	e016      	b.n	8001132 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001104:	f7ff ff2c 	bl	8000f60 <LL_RCC_LSE_IsReady>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d013      	beq.n	8001136 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800110e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001112:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001114:	e00f      	b.n	8001136 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001116:	f000 f817 	bl	8001148 <RCC_GetSystemClockFreq>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f839 	bl	8001194 <RCC_GetHCLKClockFreq>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f84b 	bl	80011c0 <RCC_GetPCLK1ClockFreq>
 800112a:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800112c:	e004      	b.n	8001138 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800112e:	bf00      	nop
 8001130:	e002      	b.n	8001138 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001132:	bf00      	nop
 8001134:	e000      	b.n	8001138 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001136:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001138:	68fb      	ldr	r3, [r7, #12]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	007a1200 	.word	0x007a1200

08001148 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001152:	f7ff ff17 	bl	8000f84 <LL_RCC_GetSysClkSource>
 8001156:	4603      	mov	r3, r0
 8001158:	2b08      	cmp	r3, #8
 800115a:	d00c      	beq.n	8001176 <RCC_GetSystemClockFreq+0x2e>
 800115c:	2b08      	cmp	r3, #8
 800115e:	d80e      	bhi.n	800117e <RCC_GetSystemClockFreq+0x36>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <RCC_GetSystemClockFreq+0x22>
 8001164:	2b04      	cmp	r3, #4
 8001166:	d003      	beq.n	8001170 <RCC_GetSystemClockFreq+0x28>
 8001168:	e009      	b.n	800117e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <RCC_GetSystemClockFreq+0x48>)
 800116c:	607b      	str	r3, [r7, #4]
      break;
 800116e:	e009      	b.n	8001184 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <RCC_GetSystemClockFreq+0x48>)
 8001172:	607b      	str	r3, [r7, #4]
      break;
 8001174:	e006      	b.n	8001184 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001176:	f000 f84b 	bl	8001210 <RCC_PLL_GetFreqDomain_SYS>
 800117a:	6078      	str	r0, [r7, #4]
      break;
 800117c:	e002      	b.n	8001184 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <RCC_GetSystemClockFreq+0x48>)
 8001180:	607b      	str	r3, [r7, #4]
      break;
 8001182:	bf00      	nop
  }

  return frequency;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	007a1200 	.word	0x007a1200

08001194 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800119c:	f7ff ff00 	bl	8000fa0 <LL_RCC_GetAHBPrescaler>
 80011a0:	4603      	mov	r3, r0
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <RCC_GetHCLKClockFreq+0x28>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	40d3      	lsrs	r3, r2
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	0800150c 	.word	0x0800150c

080011c0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80011c8:	f7ff fef8 	bl	8000fbc <LL_RCC_GetAPB1Prescaler>
 80011cc:	4603      	mov	r3, r0
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <RCC_GetPCLK1ClockFreq+0x24>)
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	40d3      	lsrs	r3, r2
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	0800151c 	.word	0x0800151c

080011e8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80011f0:	f7ff fef2 	bl	8000fd8 <LL_RCC_GetAPB2Prescaler>
 80011f4:	4603      	mov	r3, r0
 80011f6:	0adb      	lsrs	r3, r3, #11
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <RCC_GetPCLK2ClockFreq+0x24>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	40d3      	lsrs	r3, r2
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800151c 	.word	0x0800151c

08001210 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800121e:	f7ff feff 	bl	8001020 <LL_RCC_PLL_GetMainSource>
 8001222:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d003      	beq.n	800123a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001232:	e005      	b.n	8001240 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001236:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001238:	e005      	b.n	8001246 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800123c:	60fb      	str	r3, [r7, #12]
      break;
 800123e:	e002      	b.n	8001246 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001242:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001244:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001246:	f7ff ff07 	bl	8001058 <LL_RCC_PLL_GetPrediv>
 800124a:	4603      	mov	r3, r0
 800124c:	3301      	adds	r3, #1
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	fbb2 f4f3 	udiv	r4, r2, r3
 8001254:	f7ff fef2 	bl	800103c <LL_RCC_PLL_GetMultiplicator>
 8001258:	4603      	mov	r3, r0
 800125a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800125e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001262:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	fa92 f2a2 	rbit	r2, r2
 800126a:	603a      	str	r2, [r7, #0]
  return(result);
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	fab2 f282 	clz	r2, r2
 8001272:	40d3      	lsrs	r3, r2
 8001274:	3302      	adds	r3, #2
 8001276:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	bf00      	nop
 8001284:	003d0900 	.word	0x003d0900
 8001288:	007a1200 	.word	0x007a1200

0800128c <LL_USART_IsEnabled>:
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_USART_SetStopBitsLength>:
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	605a      	str	r2, [r3, #4]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_USART_SetHWFlowCtrl>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_USART_SetBaudRate>:
{
 80012fe:	b4b0      	push	{r4, r5, r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 800130c:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800130e:	2400      	movs	r4, #0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001316:	d114      	bne.n	8001342 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	005a      	lsls	r2, r3, #1
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	441a      	add	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	b29b      	uxth	r3, r3
 800132a:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 800132c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001330:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001332:	086b      	lsrs	r3, r5, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	60dc      	str	r4, [r3, #12]
}
 8001340:	e00a      	b.n	8001358 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	085a      	lsrs	r2, r3, #1
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	441a      	add	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	60da      	str	r2, [r3, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bcb0      	pop	{r4, r5, r7}
 8001360:	4770      	bx	lr
	...

08001364 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff88 	bl	800128c <LL_USART_IsEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d14e      	bne.n	8001420 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <LL_USART_Init+0xc8>)
 8001388:	4013      	ands	r3, r2
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	6851      	ldr	r1, [r2, #4]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	68d2      	ldr	r2, [r2, #12]
 8001392:	4311      	orrs	r1, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	6912      	ldr	r2, [r2, #16]
 8001398:	4311      	orrs	r1, r2
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	6992      	ldr	r2, [r2, #24]
 800139e:	430a      	orrs	r2, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff80 	bl	80012b2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4619      	mov	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff8d 	bl	80012d8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <LL_USART_Init+0xcc>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d104      	bne.n	80013d0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fe7a 	bl	80010c0 <LL_RCC_GetUSARTClockFreq>
 80013cc:	61b8      	str	r0, [r7, #24]
 80013ce:	e016      	b.n	80013fe <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <LL_USART_Init+0xd0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d107      	bne.n	80013e8 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fe49 	bl	8001074 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	e00a      	b.n	80013fe <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <LL_USART_Init+0xd4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d106      	bne.n	80013fe <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe3d 	bl	8001074 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00d      	beq.n	8001420 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800140c:	2300      	movs	r3, #0
 800140e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	69b9      	ldr	r1, [r7, #24]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff6f 	bl	80012fe <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001420:	7ffb      	ldrb	r3, [r7, #31]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	efff69f3 	.word	0xefff69f3
 8001430:	40013800 	.word	0x40013800
 8001434:	40004400 	.word	0x40004400
 8001438:	40004800 	.word	0x40004800

0800143c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4a07      	ldr	r2, [pc, #28]	; (800146c <LL_InitTick+0x30>)
 8001450:	3b01      	subs	r3, #1
 8001452:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <LL_InitTick+0x30>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <LL_InitTick+0x30>)
 800145c:	2205      	movs	r2, #5
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e010 	.word	0xe000e010

08001470 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffdd 	bl	800143c <LL_InitTick>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <LL_SetSystemCoreClock+0x1c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000

080014ac <__libc_init_array>:
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	4d0d      	ldr	r5, [pc, #52]	; (80014e4 <__libc_init_array+0x38>)
 80014b0:	4c0d      	ldr	r4, [pc, #52]	; (80014e8 <__libc_init_array+0x3c>)
 80014b2:	1b64      	subs	r4, r4, r5
 80014b4:	10a4      	asrs	r4, r4, #2
 80014b6:	2600      	movs	r6, #0
 80014b8:	42a6      	cmp	r6, r4
 80014ba:	d109      	bne.n	80014d0 <__libc_init_array+0x24>
 80014bc:	4d0b      	ldr	r5, [pc, #44]	; (80014ec <__libc_init_array+0x40>)
 80014be:	4c0c      	ldr	r4, [pc, #48]	; (80014f0 <__libc_init_array+0x44>)
 80014c0:	f000 f818 	bl	80014f4 <_init>
 80014c4:	1b64      	subs	r4, r4, r5
 80014c6:	10a4      	asrs	r4, r4, #2
 80014c8:	2600      	movs	r6, #0
 80014ca:	42a6      	cmp	r6, r4
 80014cc:	d105      	bne.n	80014da <__libc_init_array+0x2e>
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
 80014d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014d4:	4798      	blx	r3
 80014d6:	3601      	adds	r6, #1
 80014d8:	e7ee      	b.n	80014b8 <__libc_init_array+0xc>
 80014da:	f855 3b04 	ldr.w	r3, [r5], #4
 80014de:	4798      	blx	r3
 80014e0:	3601      	adds	r6, #1
 80014e2:	e7f2      	b.n	80014ca <__libc_init_array+0x1e>
 80014e4:	0800152c 	.word	0x0800152c
 80014e8:	0800152c 	.word	0x0800152c
 80014ec:	0800152c 	.word	0x0800152c
 80014f0:	08001530 	.word	0x08001530

080014f4 <_init>:
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	bf00      	nop
 80014f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fa:	bc08      	pop	{r3}
 80014fc:	469e      	mov	lr, r3
 80014fe:	4770      	bx	lr

08001500 <_fini>:
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	bf00      	nop
 8001504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001506:	bc08      	pop	{r3}
 8001508:	469e      	mov	lr, r3
 800150a:	4770      	bx	lr
